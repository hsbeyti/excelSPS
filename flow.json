[
    {
        "id": "91a08dedd804fe47",
        "type": "tab",
        "label": "check Start Sigal from SPS",
        "disabled": false,
        "info": ""
    },
    {
        "id": "92251413baef12b2",
        "type": "tab",
        "label": "read data from file",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2fd09629f2e4ee90",
        "type": "tab",
        "label": "Transfer Data to SPS",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e538af52b4727f50",
        "type": "tab",
        "label": "maschien status dashboard",
        "disabled": false,
        "info": ""
    },
    {
        "id": "30bb086b756a8fd8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "55182065ac22cf83",
        "type": "OpcUa-Endpoint",
        "endpoint": "${IP_X}",
        "secpol": "None",
        "secmode": "None",
        "none": false,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "403215d057ac2a3a",
        "type": "OpcUa-Endpoint",
        "endpoint": "${IP_X}",
        "secpol": "None",
        "secmode": "None",
        "none": false,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "29aac6db4644a543",
        "type": "OpcUa-Endpoint",
        "endpoint": "${IP_X}",
        "secpol": "None",
        "secmode": "None",
        "none": false,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "1cb64610926fbb25",
        "type": "ui_group",
        "name": "Maschine Status",
        "tab": "24c0a90e796435ac",
        "order": 1,
        "disp": true,
        "width": 11,
        "collapse": true,
        "className": ""
    },
    {
        "id": "24c0a90e796435ac",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4d9aa8d6e4d009a1",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "d567f79677389e3b",
        "type": "ui_spacer",
        "z": "e538af52b4727f50",
        "name": "spacer",
        "group": "1cb64610926fbb25",
        "order": 2,
        "width": 11,
        "height": 1
    },
    {
        "id": "92db3cb8e0393d57",
        "type": "ui_spacer",
        "z": "e538af52b4727f50",
        "name": "spacer",
        "group": "1cb64610926fbb25",
        "order": 4,
        "width": 11,
        "height": 1
    },
    {
        "id": "542226b9162f1695",
        "type": "ui_spacer",
        "z": "e538af52b4727f50",
        "name": "spacer",
        "group": "1cb64610926fbb25",
        "order": 6,
        "width": 11,
        "height": 1
    },
    {
        "id": "b9fa47c8bcd642da",
        "type": "ui_spacer",
        "z": "e538af52b4727f50",
        "name": "spacer",
        "group": "1cb64610926fbb25",
        "order": 8,
        "width": 11,
        "height": 1
    },
    {
        "id": "3e491abca81eae76",
        "type": "ui_spacer",
        "z": "e538af52b4727f50",
        "name": "spacer",
        "group": "1cb64610926fbb25",
        "order": 10,
        "width": 11,
        "height": 1
    },
    {
        "id": "3094c93fccf64c4e",
        "type": "ui_spacer",
        "z": "e538af52b4727f50",
        "name": "spacer",
        "group": "1cb64610926fbb25",
        "order": 12,
        "width": 11,
        "height": 1
    },
    {
        "id": "3f264ffe5bdf741a",
        "type": "inject",
        "z": "91a08dedd804fe47",
        "name": "check read  flag from SPS every second",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;i=12;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "19fb865349d7fe43"
            ]
        ]
    },
    {
        "id": "19fb865349d7fe43",
        "type": "OpcUa-Client",
        "z": "91a08dedd804fe47",
        "endpoint": "403215d057ac2a3a",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "Read flag",
        "x": 580,
        "y": 120,
        "wires": [
            [
                "16a0e6d20b73b712",
                "b1f9a3ce7e7df4db"
            ]
        ]
    },
    {
        "id": "b8af918b16f92f72",
        "type": "debug",
        "z": "91a08dedd804fe47",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 600,
        "wires": []
    },
    {
        "id": "16a0e6d20b73b712",
        "type": "change",
        "z": "91a08dedd804fe47",
        "name": "save read flag in the global variable \"start \"",
        "rules": [
            {
                "t": "set",
                "p": "start",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 220,
        "wires": [
            [
                "538ade89f3c11950"
            ]
        ]
    },
    {
        "id": "1973f2d0d30afa5f",
        "type": "comment",
        "z": "91a08dedd804fe47",
        "name": "",
        "info": "It listen the SPS CPU start signle to send file data\nIt does this by reading every second the flag\nform the  ns=4;i=16;datatype=Boolean OPC UA server interface.\nWhen flag is true, means we have to send the file data to the SPS ",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "fe82fef9b01b0590",
        "type": "OpcUa-Client",
        "z": "91a08dedd804fe47",
        "d": true,
        "endpoint": "55182065ac22cf83",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 460,
        "y": 500,
        "wires": [
            [
                "b8af918b16f92f72"
            ]
        ]
    },
    {
        "id": "969b79078d436af2",
        "type": "OpcUa-Item",
        "z": "91a08dedd804fe47",
        "item": "ns=4;i=17",
        "datatype": "Boolean",
        "value": "",
        "name": "set start transfer false",
        "x": 160,
        "y": 520,
        "wires": [
            [
                "fe82fef9b01b0590",
                "3cf53f3d41c823b6"
            ]
        ]
    },
    {
        "id": "b1f9a3ce7e7df4db",
        "type": "debug",
        "z": "91a08dedd804fe47",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 100,
        "wires": []
    },
    {
        "id": "4af28ee0c6f9c7d0",
        "type": "inject",
        "z": "91a08dedd804fe47",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "b16ab29fa5f6ef38"
            ]
        ]
    },
    {
        "id": "3cf53f3d41c823b6",
        "type": "debug",
        "z": "91a08dedd804fe47",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 150,
        "y": 640,
        "wires": []
    },
    {
        "id": "538ade89f3c11950",
        "type": "debug",
        "z": "91a08dedd804fe47",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 220,
        "wires": []
    },
    {
        "id": "b16ab29fa5f6ef38",
        "type": "function",
        "z": "91a08dedd804fe47",
        "name": "",
        "func": "msg.payload=true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 100,
        "y": 460,
        "wires": [
            [
                "969b79078d436af2"
            ]
        ]
    },
    {
        "id": "081cc8e57eabbfdb",
        "type": "function",
        "z": "92251413baef12b2",
        "name": "",
        "func": "msg.payload=global.get('code')\nmsg.topic=global.get('ziel');\n//msg.codel=msg.payload.length;\n//msg.ziell=msg.topic.length;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 760,
        "wires": [
            [
                "ff4dd534ce168b79"
            ]
        ]
    },
    {
        "id": "ff4dd534ce168b79",
        "type": "debug",
        "z": "92251413baef12b2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 760,
        "wires": []
    },
    {
        "id": "86240aab9bd98cb8",
        "type": "file in",
        "z": "92251413baef12b2",
        "name": "Read data from the file ",
        "filename": "${FILE_NAME}",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 640,
        "y": 200,
        "wires": [
            [
                "9ef1ef537a8ebc96",
                "cedd11f14e13689c"
            ]
        ]
    },
    {
        "id": "b8ed465c84669408",
        "type": "inject",
        "z": "92251413baef12b2",
        "name": "read file once at system start and  initialize all global variables",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 740,
        "y": 80,
        "wires": [
            [
                "8e93883fc1cc0ed3"
            ]
        ]
    },
    {
        "id": "2cb8246b788c68f4",
        "type": "split",
        "z": "92251413baef12b2",
        "name": "split each line into code and ziel MSG",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "1",
        "arraySpltType": "len",
        "stream": true,
        "addname": "",
        "x": 690,
        "y": 320,
        "wires": [
            [
                "186feeb43e60b1cc"
            ]
        ]
    },
    {
        "id": "b20626638715fcb8",
        "type": "debug",
        "z": "92251413baef12b2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 380,
        "wires": []
    },
    {
        "id": "386be75f5cf901af",
        "type": "inject",
        "z": "92251413baef12b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 760,
        "wires": [
            [
                "081cc8e57eabbfdb"
            ]
        ]
    },
    {
        "id": "8e93883fc1cc0ed3",
        "type": "change",
        "z": "92251413baef12b2",
        "name": "Initialize all global variables",
        "rules": [
            {
                "t": "set",
                "p": "counter",
                "pt": "global",
                "to": "0",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "code",
                "pt": "global",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "ziel",
                "pt": "global",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "counttest",
                "pt": "global",
                "to": "0",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "send_data_completed",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "start",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 140,
        "wires": [
            [
                "86240aab9bd98cb8"
            ]
        ]
    },
    {
        "id": "186feeb43e60b1cc",
        "type": "function",
        "z": "92251413baef12b2",
        "name": "create and store in memory one string for codes and one for ziele",
        "func": "// this function is intended to split a code pair read form CSV file as single line\n// and concatnate them to a separate strings, one for code and one for ziele\n// it checks if their lenght are less than 20, then it pads the necessar charachters\n// the SPS expects two strings one for codes and one for Zieles, each code/Ziel string must\n// conatisn all code/ziele and each code/ziel must be of 30 charachter length\n// example of code strings\n//001512018012913023080015120180129130231000151201801291302315001512018012913023160015120180\n\nvar countCodeZielePair=global.get('counter');\n\n// example of a code ziele pair : 00151201801291302308;000001047445\n// recieved in msg.payload\nvar CodeZielePair=msg.payload.split(\";\");\nvar dataCode=CodeZielePair[0];//00151201801291302308\nvar dataZiele=CodeZielePair[1];//000001047445\n//remove \\r from the end of the dataziele\n var temp=dataZiele.split(\"\\r\");\n dataZiele=temp[0];\n //temp[1] will have \\r\n var padString=\"0000000000000000\";// only 18 characters\n \n//======================\n// process code\n//======================= \n\n// pad only if string code length is smaller than 20 characters\n let diffStringlgthCode=20-(dataCode.length-1);\n if (diffStringlgthCode>0){\n     var toPadStrcode=padString.substr(0,diffStringlgthCode-1);\n     dataCode=dataCode+toPadStrcode;// pad it at the end of the code\n    //msg.padc=toPadStrcode;// for debug purpose\n  }\n  //append new code to the global var code\n  var code=global.get('code');\n  code=code+dataCode;\n  global.set('code',code);\n  // for debuging purpose \n    //msg.payload= dataCode;\n    //msg.c=code.length; \n\n\n//======================\n// process ziele\n//=======================\n// pad only if string zile length is smaler than 20 charachters\n diffStringlgthZiele=20-(dataZiele.length-1);\n\n if(diffStringlgthZiele>0){\n   var toPadStrZile=padString.substr(0,diffStringlgthZiele-1);\n   dataZiele=dataZiele+toPadStrZile;\n   // for debuging purpose \n    //msg.padz=toPadStrZile;\n  } \n  //append new ziele to the global var ziele\n  var ziel=global.get('ziel');\n  ziel=ziel+dataZiele;\n  global.set('ziel',ziel);\n  // for debuging purpose \n   //msg.topic= dataZiele;\n   //msg.z=ziel.length; \n  // for debuging purpose  \n   //msg.countCodeZielePair=countCodeZielePair;\n  // increment counter for code/Ziele pair and save it globally\n  countCodeZielePair++;\n  global.set('counter',countCodeZielePair);\n  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 380,
        "wires": [
            [
                "b20626638715fcb8"
            ]
        ]
    },
    {
        "id": "1ba15f16f826ae08",
        "type": "comment",
        "z": "92251413baef12b2",
        "name": "Readme",
        "info": "It will be excuted once, one second after the system has started.\nIt initilizes all global variable:\ncounter=0\ncode=0\nziele=0\ncounteTest=0\nsend_data_completed=flase\nstart=false\nThen it reads  data form the txt file\nand convert the data into a form as is required by the SPS CPU\n\n",
        "x": 580,
        "y": 40,
        "wires": []
    },
    {
        "id": "9ef1ef537a8ebc96",
        "type": "debug",
        "z": "92251413baef12b2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 200,
        "wires": []
    },
    {
        "id": "484526b5917b608b",
        "type": "debug",
        "z": "92251413baef12b2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 260,
        "wires": []
    },
    {
        "id": "25d3bb9a5b2f7507",
        "type": "inject",
        "z": "92251413baef12b2",
        "name": "check every second if a read flag recived form SPS CPU",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 140,
        "wires": [
            [
                "6f33147c3a11c368"
            ]
        ]
    },
    {
        "id": "6f33147c3a11c368",
        "type": "switch",
        "z": "92251413baef12b2",
        "name": "read flag recieved then start reading",
        "property": "start",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 200,
        "wires": [
            [
                "86240aab9bd98cb8"
            ]
        ]
    },
    {
        "id": "aa53b5103d9bf8b3",
        "type": "comment",
        "z": "92251413baef12b2",
        "name": "Readme",
        "info": "whenevr the SPS CPU request DATA\nread data from file to provide the SPS CPU with the up to date data.\nTo do so check every second if a read request took place",
        "x": 100,
        "y": 100,
        "wires": []
    },
    {
        "id": "cedd11f14e13689c",
        "type": "change",
        "z": "92251413baef12b2",
        "name": "set \"send_data_completed\" to false, singanling that data can be sent now",
        "rules": [
            {
                "t": "set",
                "p": "send_data_completed",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 260,
        "wires": [
            [
                "2cb8246b788c68f4",
                "484526b5917b608b"
            ]
        ]
    },
    {
        "id": "769555527b757e9d",
        "type": "debug",
        "z": "2fd09629f2e4ee90",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 400,
        "wires": []
    },
    {
        "id": "e5980da51b489322",
        "type": "inject",
        "z": "2fd09629f2e4ee90",
        "name": "Ask about LeseBreit flag from SPS every second ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;i=16;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 60,
        "wires": [
            [
                "eece7832cbe91f85"
            ]
        ]
    },
    {
        "id": "eece7832cbe91f85",
        "type": "OpcUa-Client",
        "z": "2fd09629f2e4ee90",
        "endpoint": "403215d057ac2a3a",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "read flag",
        "x": 660,
        "y": 60,
        "wires": [
            [
                "a63d56cfa9089a54"
            ]
        ]
    },
    {
        "id": "bc72e806000b7836",
        "type": "comment",
        "z": "2fd09629f2e4ee90",
        "name": "",
        "info": "\nWe have two status bits used for  hanshak with server\nlesebereit and Start: \n\n\nStart:  to be set (true) by SPS signaling the start fora  data transfer session\n        to be reset (flase) by this program signaling the end of data transfer session\nlesebereit:  reseted (false) by the SPS  signaling ready to read DATA\n             set (true) by this program signalling that data has been sent and sps can read it from the OPC UA interface\n//sequence diagram\nRead lesebereit status and if it is true do nothing\nelse if it is false then check if Start is true\n if  Start is true then\n     send all data\n     set lesebereit (true) by this program signalling that data has been sent\n     the sps should soon reset lesebereit to false\n      if lesebereit reset by sps  then start will be reset by this program signalling the en data the transferr session ",
        "x": 100,
        "y": 20,
        "wires": []
    },
    {
        "id": "dd286a842d7ef742",
        "type": "switch",
        "z": "2fd09629f2e4ee90",
        "name": "only if leseBereit is false go",
        "property": "leseBereit",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 720,
        "y": 240,
        "wires": [
            [],
            [
                "7e3cf295d56bbdc4",
                "5a1c5241aa1d00b4"
            ]
        ]
    },
    {
        "id": "69a0138a6b5599d7",
        "type": "switch",
        "z": "2fd09629f2e4ee90",
        "name": "check if read flag is recieved",
        "property": "start",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 720,
        "y": 180,
        "wires": [
            [
                "dd286a842d7ef742"
            ]
        ]
    },
    {
        "id": "45d7a984580b3de2",
        "type": "function",
        "z": "2fd09629f2e4ee90",
        "name": "get code/zeile count",
        "func": "// send all\n//var counttest=global.get('counttest');\nmsg.payload=global.get('counter');\nmsg.payload*=20;\n//counttest++;\n//global.set('counttest',counttest);\n//msg.payload=counttest;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 400,
        "wires": [
            [
                "769555527b757e9d",
                "b8833c3704bf188c"
            ]
        ]
    },
    {
        "id": "416758d851c58bcb",
        "type": "OpcUa-Client",
        "z": "2fd09629f2e4ee90",
        "endpoint": "55182065ac22cf83",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "send  code/zeile ocunt",
        "x": 940,
        "y": 460,
        "wires": [
            [
                "7c62f73d090a42f1"
            ]
        ]
    },
    {
        "id": "b8833c3704bf188c",
        "type": "OpcUa-Item",
        "z": "2fd09629f2e4ee90",
        "item": "ns=4;i=13",
        "datatype": "Int16",
        "value": "",
        "name": "get  code/zeile count ready",
        "x": 710,
        "y": 460,
        "wires": [
            [
                "416758d851c58bcb"
            ]
        ]
    },
    {
        "id": "3a10879934c920b7",
        "type": "OpcUa-Client",
        "z": "2fd09629f2e4ee90",
        "endpoint": "55182065ac22cf83",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "send zeile string",
        "x": 920,
        "y": 700,
        "wires": [
            [
                "f2c4e37d7dc784df"
            ]
        ]
    },
    {
        "id": "cfbe733c16dc6bfe",
        "type": "debug",
        "z": "2fd09629f2e4ee90",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 640,
        "wires": []
    },
    {
        "id": "011911047420797c",
        "type": "OpcUa-Item",
        "z": "2fd09629f2e4ee90",
        "item": "ns=4;i=15",
        "datatype": "String",
        "value": "",
        "name": "get zeile string reday",
        "x": 700,
        "y": 700,
        "wires": [
            [
                "3a10879934c920b7"
            ]
        ]
    },
    {
        "id": "308c27ed57cd2545",
        "type": "OpcUa-Item",
        "z": "2fd09629f2e4ee90",
        "item": "ns=4;i=14",
        "datatype": "String",
        "value": "",
        "name": "get code string ready",
        "x": 700,
        "y": 580,
        "wires": [
            [
                "23d0c90e192f2f8f"
            ]
        ]
    },
    {
        "id": "23d0c90e192f2f8f",
        "type": "OpcUa-Client",
        "z": "2fd09629f2e4ee90",
        "endpoint": "55182065ac22cf83",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "send Code string",
        "x": 930,
        "y": 580,
        "wires": [
            [
                "4f1e8045c315ca26"
            ]
        ]
    },
    {
        "id": "7c62f73d090a42f1",
        "type": "function",
        "z": "2fd09629f2e4ee90",
        "name": "get code string",
        "func": "//sedn one byte tp SPS\n\nmsg.payload=global.get('code');\n//msg.payload=\"code\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 520,
        "wires": [
            [
                "308c27ed57cd2545",
                "943e1a69b9f1f7a6"
            ]
        ]
    },
    {
        "id": "43e4983c78a0cc2d",
        "type": "debug",
        "z": "2fd09629f2e4ee90",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 120,
        "wires": []
    },
    {
        "id": "7e3cf295d56bbdc4",
        "type": "debug",
        "z": "2fd09629f2e4ee90",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 240,
        "wires": []
    },
    {
        "id": "4f1e8045c315ca26",
        "type": "function",
        "z": "2fd09629f2e4ee90",
        "name": "get zeile string",
        "func": "\nmsg.payload=global.get('ziel');\n//msg.payload=\"ziel\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 640,
        "wires": [
            [
                "011911047420797c",
                "cfbe733c16dc6bfe"
            ]
        ]
    },
    {
        "id": "e0f21ec2579e0832",
        "type": "OpcUa-Client",
        "z": "2fd09629f2e4ee90",
        "endpoint": "55182065ac22cf83",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "send lese_bereit",
        "x": 920,
        "y": 760,
        "wires": [
            [
                "bc79a1f3ce766808"
            ]
        ]
    },
    {
        "id": "f2c4e37d7dc784df",
        "type": "OpcUa-Item",
        "z": "2fd09629f2e4ee90",
        "item": "ns=4;i=16",
        "datatype": "Boolean",
        "value": "true",
        "name": "set lese_bereit true",
        "x": 690,
        "y": 760,
        "wires": [
            [
                "e0f21ec2579e0832"
            ]
        ]
    },
    {
        "id": "4e8f0bae05d66d79",
        "type": "debug",
        "z": "2fd09629f2e4ee90",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 820,
        "wires": []
    },
    {
        "id": "bc79a1f3ce766808",
        "type": "change",
        "z": "2fd09629f2e4ee90",
        "name": "set send_data_completed to true",
        "rules": [
            {
                "t": "set",
                "p": "send_data_completed",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 820,
        "wires": [
            [
                "4e8f0bae05d66d79"
            ]
        ]
    },
    {
        "id": "5a1c5241aa1d00b4",
        "type": "switch",
        "z": "2fd09629f2e4ee90",
        "name": "only when send_data_completed is false go",
        "property": "send_data_completed",
        "propertyType": "global",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 300,
        "wires": [
            [
                "fcafe2111ce91397"
            ],
            [
                "c7ecb443c3fa33a3"
            ]
        ]
    },
    {
        "id": "6025dc5b38ab6302",
        "type": "OpcUa-Client",
        "z": "2fd09629f2e4ee90",
        "endpoint": "55182065ac22cf83",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "name": "",
        "x": 380,
        "y": 440,
        "wires": [
            [
                "0774f15776cce2ba"
            ]
        ]
    },
    {
        "id": "617d25474d7299cd",
        "type": "OpcUa-Item",
        "z": "2fd09629f2e4ee90",
        "item": "ns=4;i=12",
        "datatype": "Boolean",
        "value": "",
        "name": "get  start (false) reday",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "6025dc5b38ab6302"
            ]
        ]
    },
    {
        "id": "0774f15776cce2ba",
        "type": "change",
        "z": "2fd09629f2e4ee90",
        "name": "set send_data_completed to false",
        "rules": [
            {
                "t": "set",
                "p": "send_data_completed",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 500,
        "wires": [
            [
                "4ae79c0bd4e069e1"
            ]
        ]
    },
    {
        "id": "c7ecb443c3fa33a3",
        "type": "function",
        "z": "2fd09629f2e4ee90",
        "name": "set  \"start\"  to false",
        "func": "msg.payload=false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 380,
        "wires": [
            [
                "617d25474d7299cd"
            ]
        ]
    },
    {
        "id": "f1477860f8de0228",
        "type": "debug",
        "z": "2fd09629f2e4ee90",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 620,
        "wires": []
    },
    {
        "id": "4bbfd10282faf01d",
        "type": "OpcUa-Client",
        "z": "2fd09629f2e4ee90",
        "endpoint": "403215d057ac2a3a",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "send  start (false)",
        "x": 390,
        "y": 560,
        "wires": [
            [
                "b0075b7d8ad4656b"
            ]
        ]
    },
    {
        "id": "b0075b7d8ad4656b",
        "type": "change",
        "z": "2fd09629f2e4ee90",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "start",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 140,
        "y": 620,
        "wires": [
            [
                "f1477860f8de0228"
            ]
        ]
    },
    {
        "id": "4ae79c0bd4e069e1",
        "type": "function",
        "z": "2fd09629f2e4ee90",
        "name": "Read \"start\"",
        "func": "msg.topic=\"ns=4;i=16;datatype=Boolean\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 560,
        "wires": [
            [
                "4bbfd10282faf01d"
            ]
        ]
    },
    {
        "id": "943e1a69b9f1f7a6",
        "type": "file",
        "z": "2fd09629f2e4ee90",
        "d": true,
        "name": "",
        "filename": "testCode.txt",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1170,
        "y": 520,
        "wires": [
            [
                "6261a77ee19d8508"
            ]
        ]
    },
    {
        "id": "6261a77ee19d8508",
        "type": "debug",
        "z": "2fd09629f2e4ee90",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 580,
        "wires": []
    },
    {
        "id": "fcafe2111ce91397",
        "type": "delay",
        "z": "2fd09629f2e4ee90",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 300,
        "wires": [
            [
                "45d7a984580b3de2"
            ]
        ]
    },
    {
        "id": "a63d56cfa9089a54",
        "type": "change",
        "z": "2fd09629f2e4ee90",
        "name": "set global variable \"leseBereit\" to flag",
        "rules": [
            {
                "t": "set",
                "p": "leseBereit",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 120,
        "wires": [
            [
                "69a0138a6b5599d7",
                "43e4983c78a0cc2d"
            ]
        ]
    },
    {
        "id": "aa21a03b36b671ee",
        "type": "inject",
        "z": "e538af52b4727f50",
        "name": "Steurung ein End point in SPS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;i=9;datatype=Boolean",
        "payloadType": "date",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "c3384702328f613c"
            ]
        ]
    },
    {
        "id": "c3384702328f613c",
        "type": "OpcUa-Client",
        "z": "e538af52b4727f50",
        "endpoint": "29aac6db4644a543",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 480,
        "y": 60,
        "wires": [
            [
                "d4feab48beb9fdc8"
            ]
        ]
    },
    {
        "id": "ad62f4f690edc7be",
        "type": "debug",
        "z": "e538af52b4727f50",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 20,
        "wires": []
    },
    {
        "id": "d3b318d2b1e005b5",
        "type": "inject",
        "z": "e538af52b4727f50",
        "name": "Auto maschine status End point in SPS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;i=11;datatype=Boolean",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "c3384702328f613c"
            ]
        ]
    },
    {
        "id": "73fe2320395f2d27",
        "type": "inject",
        "z": "e538af52b4727f50",
        "name": "Hand maschine status End point in SPS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;i=10;datatype=Boolean",
        "payloadType": "date",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "c3384702328f613c"
            ]
        ]
    },
    {
        "id": "444559ff7457cfd7",
        "type": "inject",
        "z": "e538af52b4727f50",
        "name": "benutzer name End point in SPS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;i=13;datatype=String",
        "payloadType": "date",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "c3384702328f613c"
            ]
        ]
    },
    {
        "id": "61a1fa54cb5d2ab6",
        "type": "function",
        "z": "e538af52b4727f50",
        "name": "get Steurung",
        "func": "\nmsg.payload=msg.payload[0];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 120,
        "wires": [
            [
                "19dffb82697a7019"
            ]
        ]
    },
    {
        "id": "d4feab48beb9fdc8",
        "type": "join",
        "z": "e538af52b4727f50",
        "name": "Create one messsage out of seven ",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 740,
        "y": 60,
        "wires": [
            [
                "61a1fa54cb5d2ab6",
                "ad62f4f690edc7be",
                "07cae95480103199",
                "add4a078b0a82bbf",
                "d93f60f54c760ad3",
                "4973258121de3fcc",
                "38e4eb74433c136c",
                "1d86804ae69d74a2"
            ]
        ]
    },
    {
        "id": "b0c2c329e3c4f4fc",
        "type": "inject",
        "z": "e538af52b4727f50",
        "name": "Fehler in Maschine End point in SPS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;i=12;datatype=Boolean",
        "payloadType": "date",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "c3384702328f613c"
            ]
        ]
    },
    {
        "id": "891a1a36c6b5e301",
        "type": "inject",
        "z": "e538af52b4727f50",
        "name": "Messewert End point SPS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;i=15;datatype=number",
        "payloadType": "date",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "c3384702328f613c"
            ]
        ]
    },
    {
        "id": "2b885eae42133e0c",
        "type": "inject",
        "z": "e538af52b4727f50",
        "name": "System time in End point SPS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;i=14;datatype=number",
        "payloadType": "date",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "c3384702328f613c"
            ]
        ]
    },
    {
        "id": "07cae95480103199",
        "type": "function",
        "z": "e538af52b4727f50",
        "name": "get Auto",
        "func": "\nmsg.payload=msg.payload[1];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 200,
        "wires": [
            [
                "b00ba0b78972ec7c"
            ]
        ]
    },
    {
        "id": "add4a078b0a82bbf",
        "type": "function",
        "z": "e538af52b4727f50",
        "name": "get Hand",
        "func": "\nmsg.payload=msg.payload[2];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 280,
        "wires": [
            [
                "549a44f9717e9eb4"
            ]
        ]
    },
    {
        "id": "5f867577b69b9f9d",
        "type": "ui_text",
        "z": "e538af52b4727f50",
        "group": "1cb64610926fbb25",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Benutzer",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1100,
        "y": 360,
        "wires": []
    },
    {
        "id": "d93f60f54c760ad3",
        "type": "function",
        "z": "e538af52b4727f50",
        "name": "get benutzer",
        "func": "\nmsg.payload=msg.payload[3];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 360,
        "wires": [
            [
                "5f867577b69b9f9d"
            ]
        ]
    },
    {
        "id": "4973258121de3fcc",
        "type": "function",
        "z": "e538af52b4727f50",
        "name": "get Fehler",
        "func": "\nmsg.payload=msg.payload[4];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 440,
        "wires": [
            [
                "f25a76f14ac591b5"
            ]
        ]
    },
    {
        "id": "3d354d6ff2407cf4",
        "type": "ui_text",
        "z": "e538af52b4727f50",
        "group": "1cb64610926fbb25",
        "order": 13,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Messwert",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1100,
        "y": 520,
        "wires": []
    },
    {
        "id": "38e4eb74433c136c",
        "type": "function",
        "z": "e538af52b4727f50",
        "name": "get Messwert",
        "func": "\nmsg.payload=msg.payload[5];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 520,
        "wires": [
            [
                "3d354d6ff2407cf4"
            ]
        ]
    },
    {
        "id": "4e742562ebe9183b",
        "type": "ui_text",
        "z": "e538af52b4727f50",
        "group": "1cb64610926fbb25",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "System Time",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1110,
        "y": 600,
        "wires": []
    },
    {
        "id": "1d86804ae69d74a2",
        "type": "moment",
        "z": "e538af52b4727f50",
        "name": "hh:mm:ss",
        "topic": "",
        "input": "payload.timestamp",
        "inputType": "msg",
        "inTz": "Europe/Berlin",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "",
        "locale": "de-DE",
        "output": "",
        "outputType": "msg",
        "outTz": "Europe/Berlin",
        "x": 880,
        "y": 580,
        "wires": [
            [
                "4e742562ebe9183b"
            ]
        ]
    },
    {
        "id": "19dffb82697a7019",
        "type": "ui_led",
        "z": "e538af52b4727f50",
        "order": 7,
        "group": "1cb64610926fbb25",
        "width": 0,
        "height": 0,
        "label": "Steurung",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Steurung",
        "x": 1100,
        "y": 100,
        "wires": []
    },
    {
        "id": "b00ba0b78972ec7c",
        "type": "ui_led",
        "z": "e538af52b4727f50",
        "order": 3,
        "group": "1cb64610926fbb25",
        "width": 0,
        "height": 0,
        "label": "Auto",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Auto",
        "x": 1090,
        "y": 200,
        "wires": []
    },
    {
        "id": "549a44f9717e9eb4",
        "type": "ui_led",
        "z": "e538af52b4727f50",
        "order": 5,
        "group": "1cb64610926fbb25",
        "width": 0,
        "height": 0,
        "label": "Hand",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Hand",
        "x": 1120,
        "y": 280,
        "wires": []
    },
    {
        "id": "f25a76f14ac591b5",
        "type": "ui_led",
        "z": "e538af52b4727f50",
        "order": 9,
        "group": "1cb64610926fbb25",
        "width": 0,
        "height": 0,
        "label": "Fehler",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Fehler",
        "x": 1120,
        "y": 440,
        "wires": []
    },
    {
        "id": "3082aeb83f6b6cc0",
        "type": "OpcUa-Client",
        "z": "30bb086b756a8fd8",
        "d": true,
        "endpoint": "55182065ac22cf83",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 640,
        "y": 220,
        "wires": [
            [
                "e24ff3dd18b1d54a"
            ]
        ]
    },
    {
        "id": "c7fce2cf14ea6927",
        "type": "OpcUa-Item",
        "z": "30bb086b756a8fd8",
        "item": "ns=4;i=16",
        "datatype": "Boolean",
        "value": "",
        "name": "set start transfer false",
        "x": 640,
        "y": 160,
        "wires": [
            [
                "3082aeb83f6b6cc0"
            ]
        ]
    },
    {
        "id": "d4816c2b67aa2563",
        "type": "function",
        "z": "30bb086b756a8fd8",
        "name": "",
        "func": "msg.payload=false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            [
                "c7fce2cf14ea6927"
            ]
        ]
    },
    {
        "id": "cf61517c295a089d",
        "type": "inject",
        "z": "30bb086b756a8fd8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "d4816c2b67aa2563"
            ]
        ]
    },
    {
        "id": "e24ff3dd18b1d54a",
        "type": "debug",
        "z": "30bb086b756a8fd8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 240,
        "wires": []
    }
]